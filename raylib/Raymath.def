DEFINITION MODULE FOR "C" Raymath;

FROM SYSTEM IMPORT INTEGER32, REAL32;
FROM Raylib IMPORT TVector2, TVector3, TQuaternion, TMatrix;

EXPORT UNQUALIFIED
  (* types *)
  TFloat3, TFloat16,
  (* constants *)
  VERSION, PI, EPSILON, DEG2RAD, RAD2DEG,
  (* functions *)
  Clamp, Lerp, Normalize, Remap, Wrap, FloatEquals,

  Vector2Zero, Vector2One, Vector2Add, Vector2AddValue, Vector2Subtract, Vector2SubtractValue,
  Vector2Length, Vector2LengthSqr, Vector2DotProduct, Vector2Distance, Vector2DistanceSqr,
  Vector2Angle, Vector2LineAngle, Vector2Scale, Vector2Multiply, Vector2Negate, Vector2Divide,
  Vector2Normalize, Vector2Transform, Vector2Lerp, Vector2Reflect, Vector2Rotate, Vector2MoveTowards,
  Vector2Invert, Vector2Clamp, Vector2ClampValue, Vector2Equals,

  Vector3Zero, Vector3One, Vector3Add, Vector3AddValue, Vector3Subtract, Vector3SubtractValue,
  Vector3Scale, Vector3Multiply, Vector3CrossProduct, Vector3Perpendicular, Vector3Length,
  Vector3LengthSqr, Vector3DotProduct, Vector3Distance, Vector3DistanceSqr, Vector3Angle,
  Vector3Negate, Vector3Divide, Vector3Normalize, Vector3Project, Vector3Reject,
  Vector3OrthoNormalize, Vector3Transform, Vector3RotateByQuaternion, Vector3RotateByAxisAngle,
  Vector3Lerp, Vector3Reflect, Vector3Min, Vector3Max, Vector3Barycenter, Vector3Unproject,
  Vector3ToFloatV, Vector3Invert, Vector3Clamp, Vector3ClampValue, Vector3Equals, Vector3Refract;

TYPE
  TFloat3 = RECORD
    V: ARRAY[0..2] OF REAL32;
  END;

  TFloat16 = RECORD
    V: ARRAY[0..15] OF REAL32;
  END;

CONST
  VERSION = "raymath 1.5 wrapper (raylib 5.0 wrapper)";

  PI = 3.14159265358979323846;
  EPSILON = 0.000001;
  DEG2RAD = PI / 180.0;
  RAD2DEG = 180.0 / PI;

(* math util functions *)
PROCEDURE Clamp(Value, Min, Max: REAL32): REAL32;
PROCEDURE Lerp(Start, End, Amount: REAL32): REAL32;
PROCEDURE Normalize(Value, Start, End: REAL32): REAL32;
PROCEDURE Remap(Value, InputStart, InputEnd, OutputStart, OutputEnd: REAL32): REAL32;
PROCEDURE Wrap(Value, Min, Max: REAL32): REAL32;
PROCEDURE FloatEquals(X, Y: REAL32): INTEGER32;

(* vector2 math *)
PROCEDURE Vector2Zero(): TVector2;
PROCEDURE Vector2One(): TVector2;
PROCEDURE Vector2Add(V1, V2: TVector2): TVector2;
PROCEDURE Vector2AddValue(V: TVector2; Add: REAL32): TVector2;
PROCEDURE Vector2Subtract(V1, V2: TVector2): TVector2;
PROCEDURE Vector2SubtractValue(V: TVector2; Sub: REAL32): REAL32;
PROCEDURE Vector2Length(V: TVector2): REAL32;
PROCEDURE Vector2LengthSqr(V: TVector2): REAL32;
PROCEDURE Vector2DotProduct(V1, V2: TVector2): REAL32;
PROCEDURE Vector2Distance(V1, V2: TVector2): REAL32;
PROCEDURE Vector2DistanceSqr(V1, V2: TVector2): REAL32;
PROCEDURE Vector2Angle(V1, V2: TVector2): REAL32;
PROCEDURE Vector2LineAngle(Start, End: TVector2): REAL32;
PROCEDURE Vector2Scale(V: TVector2; Scale: REAL32): TVector2;
PROCEDURE Vector2Multiply(V1, V2: TVector2): TVector2;
PROCEDURE Vector2Negate(V: TVector2): TVector2;
PROCEDURE Vector2Divide(V1, V2: TVector2): TVector2;
PROCEDURE Vector2Normalize(V: TVector2): TVector2;
PROCEDURE Vector2Transform(V: TVector2; M: TMatrix): TVector2;
PROCEDURE Vector2Lerp(V1, V2: TVector2; Amount: REAL32): TVector2;
PROCEDURE Vector2Reflect(V, Normal: TVector2): TVector2;
PROCEDURE Vector2Rotate(V: TVector2; Angle: REAL32): TVector2;
PROCEDURE Vector2MoveTowards(V, Target: TVector2; MaxDistance: REAL32): TVector2;
PROCEDURE Vector2Invert(V: TVector2): TVector2;
PROCEDURE Vector2Clamp(V, Min, Max: TVector2): TVector2;
PROCEDURE Vector2ClampValue(V: TVector2; Min, Max: REAL32): TVector2;
PROCEDURE Vector2Equals(P, Q: TVector2): INTEGER32;

(* vector3 math *)
PROCEDURE Vector3Zero(): TVector3;
PROCEDURE Vector3One(): TVector3;
PROCEDURE Vector3Add(V1, V2: TVector3): TVector3;
PROCEDURE Vector3AddValue(V: TVector3; Add: REAL32): TVector3;
PROCEDURE Vector3Subtract(V1, V2: TVector3): TVector3;
PROCEDURE Vector3SubtractValue(V: TVector3; Sub: REAL32): TVector3;
PROCEDURE Vector3Scale(V: TVector3; Scalar: REAL32): TVector3;
PROCEDURE Vector3Multiply(V1, V2: TVector3): TVector3;
PROCEDURE Vector3CrossProduct(V1, V2: TVector3): TVector3;
PROCEDURE Vector3Perpendicular(V: TVector3): TVector3;
PROCEDURE Vector3Length(V: TVector3): REAL32;
PROCEDURE Vector3LengthSqr(V: TVector3): REAL32;
PROCEDURE Vector3DotProduct(V1, V2: TVector3): REAL32;
PROCEDURE Vector3Distance(V1, V2: TVector3): REAL32;
PROCEDURE Vector3DistanceSqr(V1, V2: TVector3): REAL32;
PROCEDURE Vector3Angle(V1, V2: TVector3): REAL32;
PROCEDURE Vector3Negate(V: TVector3): TVector3;
PROCEDURE Vector3Divide(V1, V2: TVector3): TVector3;
PROCEDURE Vector3Normalize(V: TVector3): TVector3;
PROCEDURE Vector3Project(V1, V2: TVector3): TVector3;
PROCEDURE Vector3Reject(V1, V2: TVector3): TVector3;
PROCEDURE Vector3OrthoNormalize(VAR V1, V2: TVector3);
PROCEDURE Vector3Transform(V: TVector3; Mat: TMatrix): TVector3;
PROCEDURE Vector3RotateByQuaternion(V: TVector3; Q: TQuaternion): TVector3;
PROCEDURE Vector3RotateByAxisAngle(V, Axis: TVector3; Angle: REAL32): TVector3;
PROCEDURE Vector3Lerp(V1, V2: TVector3; Amount: REAL32): TVector3;
PROCEDURE Vector3Reflect(V, Normal: TVector3): TVector3;
PROCEDURE Vector3Min(V1, V2: TVector3): TVector3;
PROCEDURE Vector3Max(V1, V2: TVector3): TVector3;
PROCEDURE Vector3Barycenter(P, A, B, C: TVector3): TVector3;
PROCEDURE Vector3Unproject(Source: TVector3; Projection, View: TMatrix): TVector3;
PROCEDURE Vector3ToFloatV(V: TVector3): TFloat3;
PROCEDURE Vector3Invert(V: TVector3): TVector3;
PROCEDURE Vector3Clamp(V, Min, Max: TVector3): TVector3;
PROCEDURE Vector3ClampValue(V: TVector3; Min, Max: REAL32): TVector3;
PROCEDURE Vector3Equals(P, Q: TVector3): INTEGER32;
PROCEDURE Vector3Refract(V, N: TVector3; R: REAL32): TVector3;

END Raymath.
